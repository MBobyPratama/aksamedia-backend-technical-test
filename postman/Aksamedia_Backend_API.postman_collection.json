{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Aksamedia Backend API",
		"description": "API Collection for Aksamedia Backend Developer Test\n\nThis collection contains all the required API endpoints for the employee management system.\n\n## Authentication\nMost endpoints require authentication using Bearer token. First login to get the token, then use it in the Authorization header.\n\n## Default Admin Credentials\n- Username: admin\n- Password: pastibisa\n\n## Base URL\nhttp://127.0.0.1:8000/api\n\n## Features\n- User authentication with token-based system\n- Division management\n- Employee CRUD operations with image upload\n- Filtering and pagination support",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test if login is successful",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.expect(jsonData.data.token).to.exist;",
									"    ",
									"    // Save token for other requests",
									"    pm.environment.set(\"auth_token\", jsonData.data.token);",
									"});",
									"",
									"pm.test(\"Response has admin data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.admin).to.exist;",
									"    pm.expect(jsonData.data.admin.username).to.eql(\"admin\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"pastibisa\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						},
						"description": "Login endpoint for admin authentication.\n\n**Access**: Public (only when not authenticated)\n**Method**: POST\n\n**Request Body**:\n- username (string, required): Admin username\n- password (string, required): Admin password\n\n**Response**:\n- status: success/error\n- message: Response message\n- data.token: JWT token for authentication\n- data.admin: Admin user information\n\n**Default Credentials**:\n- Username: admin\n- Password: pastibisa"
					},
					"response": [
						{
							"name": "Successful Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"pastibisa\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Login berhasil\",\n    \"data\": {\n        \"token\": \"1|abcd1234efgh5678ijkl9012mnop3456qrst7890\",\n        \"admin\": {\n            \"id\": \"12345678-1234-1234-1234-123456789012\",\n            \"name\": \"Administrator\",\n            \"username\": \"admin\",\n            \"phone\": \"08123456789\",\n            \"email\": \"admin@aksamedia.com\"\n        }\n    }\n}"
						},
						{
							"name": "Failed Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"wrongpassword\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"error\",\n    \"message\": \"Username atau password salah\"\n}"
						}
					]
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Logout successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.expect(jsonData.message).to.eql(\"Logout berhasil\");",
									"    ",
									"    // Clear the token",
									"    pm.environment.unset(\"auth_token\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"logout"
							]
						},
						"description": "Logout endpoint to invalidate current token.\n\n**Access**: Authenticated users only\n**Method**: POST\n**Authentication**: Bearer Token required\n\n**Response**:\n- status: success/error\n- message: Logout confirmation message"
					},
					"response": [
						{
							"name": "Successful Logout",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/logout",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Logout berhasil\"\n}"
						}
					]
				}
			],
			"description": "Authentication endpoints for login and logout functionality."
		},
		{
			"name": "Divisions",
			"item": [
				{
					"name": "Get All Divisions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has divisions data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.expect(jsonData.data.divisions).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination).to.exist;",
									"    pm.expect(jsonData.pagination.current_page).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/divisions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"divisions"
							]
						},
						"description": "Get all divisions with pagination and optional filtering.\n\n**Access**: Authenticated users only\n**Method**: GET\n**Authentication**: Bearer Token required\n\n**Query Parameters**:\n- name (optional): Filter divisions by name (partial match)\n\n**Response**:\n- status: success/error\n- message: Response message\n- data.divisions: Array of division objects\n- pagination: Pagination information\n\n**Division Object**:\n- id: UUID of the division\n- name: Division name\n- created_at: Creation timestamp\n- updated_at: Update timestamp"
					},
					"response": [
						{
							"name": "Get All Divisions",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/divisions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"divisions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Data divisi berhasil diambil\",\n    \"data\": {\n        \"divisions\": [\n            {\n                \"id\": \"12345678-1234-1234-1234-123456789012\",\n                \"name\": \"Mobile Apps\",\n                \"created_at\": \"2025-07-14T15:01:08.000000Z\",\n                \"updated_at\": \"2025-07-14T15:01:08.000000Z\"\n            },\n            {\n                \"id\": \"12345678-1234-1234-1234-123456789013\",\n                \"name\": \"QA\",\n                \"created_at\": \"2025-07-14T15:01:08.000000Z\",\n                \"updated_at\": \"2025-07-14T15:01:08.000000Z\"\n            },\n            {\n                \"id\": \"12345678-1234-1234-1234-123456789014\",\n                \"name\": \"Full Stack\",\n                \"created_at\": \"2025-07-14T15:01:08.000000Z\",\n                \"updated_at\": \"2025-07-14T15:01:08.000000Z\"\n            },\n            {\n                \"id\": \"12345678-1234-1234-1234-123456789015\",\n                \"name\": \"Backend\",\n                \"created_at\": \"2025-07-14T15:01:08.000000Z\",\n                \"updated_at\": \"2025-07-14T15:01:08.000000Z\"\n            },\n            {\n                \"id\": \"12345678-1234-1234-1234-123456789016\",\n                \"name\": \"Frontend\",\n                \"created_at\": \"2025-07-14T15:01:08.000000Z\",\n                \"updated_at\": \"2025-07-14T15:01:08.000000Z\"\n            },\n            {\n                \"id\": \"12345678-1234-1234-1234-123456789017\",\n                \"name\": \"UI/UX Designer\",\n                \"created_at\": \"2025-07-14T15:01:08.000000Z\",\n                \"updated_at\": \"2025-07-14T15:01:08.000000Z\"\n            }\n        ]\n    },\n    \"pagination\": {\n        \"current_page\": 1,\n        \"per_page\": 10,\n        \"total\": 6,\n        \"last_page\": 1,\n        \"from\": 1,\n        \"to\": 6,\n        \"has_more_pages\": false\n    }\n}"
						}
					]
				},
				{
					"name": "Filter Divisions by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filtered results contain search term\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    if (jsonData.data.divisions.length > 0) {",
									"        jsonData.data.divisions.forEach(function(division) {",
									"            pm.expect(division.name.toLowerCase()).to.include(\"backend\");",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/divisions?name=Backend",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"divisions"
							],
							"query": [
								{
									"key": "name",
									"value": "Backend",
									"description": "Filter divisions by name"
								}
							]
						},
						"description": "Filter divisions by name using partial matching.\n\n**Access**: Authenticated users only\n**Method**: GET\n**Authentication**: Bearer Token required\n\n**Query Parameters**:\n- name: Filter term for division name (case-insensitive partial match)"
					},
					"response": []
				}
			],
			"description": "Division management endpoints for retrieving division data."
		},
		{
			"name": "Employees",
			"item": [
				{
					"name": "Get All Employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has employees data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.expect(jsonData.data.employees).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Employee object has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.employees.length > 0) {",
									"        var employee = jsonData.data.employees[0];",
									"        pm.expect(employee).to.have.property('id');",
									"        pm.expect(employee).to.have.property('name');",
									"        pm.expect(employee).to.have.property('phone');",
									"        pm.expect(employee).to.have.property('position');",
									"        pm.expect(employee).to.have.property('division');",
									"        pm.expect(employee.division).to.have.property('id');",
									"        pm.expect(employee.division).to.have.property('name');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/employees",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees"
							]
						},
						"description": "Get all employees with pagination and optional filtering.\n\n**Access**: Authenticated users only\n**Method**: GET\n**Authentication**: Bearer Token required\n\n**Query Parameters**:\n- name (optional): Filter employees by name (partial match)\n- division_id (optional): Filter employees by division UUID\n\n**Response**:\n- status: success/error\n- message: Response message\n- data.employees: Array of employee objects\n- pagination: Pagination information\n\n**Employee Object**:\n- id: UUID of the employee\n- image: URL to employee image (if exists)\n- name: Employee name\n- phone: Phone number\n- division: Division object with id and name\n- position: Job position"
					},
					"response": [
						{
							"name": "Get All Employees",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/employees",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Data karyawan berhasil diambil\",\n    \"data\": {\n        \"employees\": [\n            {\n                \"id\": \"12345678-1234-1234-1234-123456789018\",\n                \"image\": \"http://127.0.0.1:8000/storage/employees/sample.jpg\",\n                \"name\": \"John Doe\",\n                \"phone\": \"08123456789\",\n                \"division\": {\n                    \"id\": \"12345678-1234-1234-1234-123456789015\",\n                    \"name\": \"Backend\"\n                },\n                \"position\": \"Senior Developer\"\n            }\n        ]\n    },\n    \"pagination\": {\n        \"current_page\": 1,\n        \"per_page\": 10,\n        \"total\": 1,\n        \"last_page\": 1,\n        \"from\": 1,\n        \"to\": 1,\n        \"has_more_pages\": false\n    }\n}"
						}
					]
				},
				{
					"name": "Filter Employees by Name",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/employees?name=John",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees"
							],
							"query": [
								{
									"key": "name",
									"value": "John",
									"description": "Filter employees by name"
								}
							]
						},
						"description": "Filter employees by name using partial matching."
					},
					"response": []
				},
				{
					"name": "Filter Employees by Division",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/employees?division_id={{division_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees"
							],
							"query": [
								{
									"key": "division_id",
									"value": "{{division_id}}",
									"description": "Filter employees by division UUID"
								}
							]
						},
						"description": "Filter employees by division using division UUID."
					},
					"response": []
				},
				{
					"name": "Create Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Employee created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.expect(jsonData.message).to.eql(\"Karyawan berhasil ditambahkan\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Jane Smith",
									"description": "Employee name",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "08123456790",
									"description": "Phone number",
									"type": "text"
								},
								{
									"key": "division",
									"value": "12345678-1234-1234-1234-123456789015",
									"description": "Division UUID",
									"type": "text"
								},
								{
									"key": "position",
									"value": "Frontend Developer",
									"description": "Job position",
									"type": "text"
								},
								{
									"key": "image",
									"description": "Employee photo (optional)",
									"type": "file",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/employees",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees"
							]
						},
						"description": "Create a new employee record.\n\n**Access**: Authenticated users only\n**Method**: POST\n**Authentication**: Bearer Token required\n**Content-Type**: multipart/form-data\n\n**Form Data Parameters**:\n- name (string, required): Employee name (max 255 chars)\n- phone (string, required): Phone number (max 20 chars)\n- division (string, required): Division UUID\n- position (string, required): Job position (max 255 chars)\n- image (file, optional): Employee photo (jpeg, png, jpg, gif, max 2MB)\n\n**Response**:\n- status: success/error\n- message: Creation confirmation message\n\n**Validation Rules**:\n- All fields except image are required\n- Division must exist in database\n- Image must be valid image file\n- File size limit: 2MB"
					},
					"response": [
						{
							"name": "Create Employee Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Jane Smith",
											"type": "text"
										},
										{
											"key": "phone",
											"value": "08123456790",
											"type": "text"
										},
										{
											"key": "division",
											"value": "12345678-1234-1234-1234-123456789015",
											"type": "text"
										},
										{
											"key": "position",
											"value": "Frontend Developer",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/employees",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"employees"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Karyawan berhasil ditambahkan\"\n}"
						}
					]
				},
				{
					"name": "Update Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Employee updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.expect(jsonData.message).to.eql(\"Karyawan berhasil diperbarui\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jane Smith Updated\",\n    \"phone\": \"08123456791\",\n    \"division\": \"12345678-1234-1234-1234-123456789016\",\n    \"position\": \"Senior Frontend Developer\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/employees/{{employee_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees",
								"{{employee_id}}"
							]
						},
						"description": "Update an existing employee record.\n\n**Access**: Authenticated users only\n**Method**: PUT\n**Authentication**: Bearer Token required\n**Content-Type**: application/json (for JSON) or multipart/form-data (for file upload)\n\n**URL Parameters**:\n- id (string, required): Employee UUID\n\n**Request Body** (JSON format):\n- name (string, required): Employee name\n- phone (string, required): Phone number\n- division (string, required): Division UUID\n- position (string, required): Job position\n- image (file, optional): New employee photo\n\n**Note**: For image uploads, use multipart/form-data instead of JSON.\n\n**Response**:\n- status: success/error\n- message: Update confirmation message"
					},
					"response": [
						{
							"name": "Update Employee Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Jane Smith Updated\",\n    \"phone\": \"08123456791\",\n    \"division\": \"12345678-1234-1234-1234-123456789016\",\n    \"position\": \"Senior Frontend Developer\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/employees/12345678-1234-1234-1234-123456789018",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"employees",
										"12345678-1234-1234-1234-123456789018"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Karyawan berhasil diperbarui\"\n}"
						}
					]
				},
				{
					"name": "Update Employee with Image",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Jane Smith Updated",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "08123456791",
									"type": "text"
								},
								{
									"key": "division",
									"value": "12345678-1234-1234-1234-123456789016",
									"type": "text"
								},
								{
									"key": "position",
									"value": "Senior Frontend Developer",
									"type": "text"
								},
								{
									"key": "image",
									"description": "New employee photo",
									"type": "file",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/employees/{{employee_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees",
								"{{employee_id}}"
							]
						},
						"description": "Update employee with new image upload.\n\nUse this request when you need to update the employee's photo along with other data."
					},
					"response": []
				},
				{
					"name": "Delete Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Employee deleted successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.expect(jsonData.message).to.eql(\"Karyawan berhasil dihapus\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/employees/{{employee_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees",
								"{{employee_id}}"
							]
						},
						"description": "Delete an employee record.\n\n**Access**: Authenticated users only\n**Method**: DELETE\n**Authentication**: Bearer Token required\n\n**URL Parameters**:\n- id (string, required): Employee UUID\n\n**Response**:\n- status: success/error\n- message: Deletion confirmation message\n\n**Note**: This will also delete the employee's image file if it exists."
					},
					"response": [
						{
							"name": "Delete Employee Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/employees/12345678-1234-1234-1234-123456789018",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"employees",
										"12345678-1234-1234-1234-123456789018"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Karyawan berhasil dihapus\"\n}"
						}
					]
				}
			],
			"description": "Employee management endpoints for CRUD operations."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.environment.get(\"base_url\")) {",
					"    pm.environment.set(\"base_url\", \"http://127.0.0.1:8000/api\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response time",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Global test to check content type",
					"pm.test(\"Content-Type is application/json\", function () {",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000/api",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "employee_id",
			"value": "12345678-1234-1234-1234-123456789018",
			"type": "string"
		},
		{
			"key": "division_id",
			"value": "12345678-1234-1234-1234-123456789015",
			"type": "string"
		}
	]
}
